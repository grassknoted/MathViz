<!DOCTYPE html>
<html>
    <head>
        <title>NGO Portal | Volunteer Registration</title>
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <script src="https://unpkg.com/sweetalert/dist/sweetalert.min.js"></script>
        <!-- <link rel="styles/volunteer_registration.css" rel="stylesheet"> -->
        <style>
        body {
margin: 0;
background: #ec4d48;
font-family: 'Noto Sans', sans-serif;
overflow-x: hidden;
}
h1 {
position: relative;
color: #fff;
opacity: 0;
transition: .8s ease-in-out;
}
#progress {
position: absolute;
/*background: #c49000;*/
background-image: linear-gradient(0deg, rgba(0,0,0,0.6), rgba(0,0,0,0.6)), url(resources/class4.jpg);
background-position: fixed; /* Center the image */
background-repeat: no-repeat; /* Do not repeat the image */
height: 100vh;
background-size: cover;
width: 0;
transition: width 0.2s ease-in-out;
}
.center {
height: 100vh;
display: flex;
justify-content: center;
align-items: center;
}
#register {
background: #fff;
position: relative;
width: 550px;
box-shadow: 0 16px 24px 2px rgba(0,0,0,0.14), 0 6px 30px 5px rgba(0,0,0,0.12), 0 8px 10px -5px rgba(0,0,0,0.3);
transition: transform .1s ease-in-out;
}
#register.close {
width: 0;
padding: 0;
overflow: hidden;
transition: .8s ease-in-out;
box-shadow: 0 16px 24px 2px rgba(0,0,0,0);
}
/*mongo restore*/
#forwardButton {
position: absolute;
right: 20px;
top: 15vh;
font-size: 5em;
color: white;
float: right;
cursor: pointer;
z-index: 20
}
#previousButton {
position: absolute;
font-size: 5em;
left: 30px; /* same as padding on container */
top: 15vh;
z-index: 20;
color: white;
float: right;
cursor: pointer;
}
#previousButton:hover {color: #c49000}
#forwardButton:hover {color: #c49000}
.wrong #forwardButton {color: #ff2d26}
.close #forwardButton, .close #previousButton {color: #fff}
#inputContainer {
position: relative;
padding: 30px 20px 20px 20px;
margin: 10px 60px 10px 10px;
opacity: 0;
transition: opacity .3s ease-in-out;
}
#inputContainer input {
position: relative;
width: 100%;
border: none;
font-size: 20px;
font-weight: bold;
outline: 0;
background: transparent;
box-shadow: none;
font-family: 'Noto Sans', sans-serif;
}
#inputLabel {
position: absolute;
pointer-events: none;
top: 32px; /* same as container padding + margin */
left: 20px; /* same as container padding */
font-size: 20px;
font-weight: bold;
transition: .2s ease-in-out;
}
#inputContainer input:valid + #inputLabel {
top: 6px;
left: 42px; /* space for previous arrow */
margin-left: 0!important;
font-size: 11px;
font-weight: normal;
color: #9e9e9e;
}
#inputProgress {
border-bottom: 3px solid #fbc02d;
width: 0;
transition: width .6s ease-in-out;
}
.wrong #inputProgress {
border-color: #ff2d26;
}
@media (max-width: 420px) {
#forwardButton {right: 10px}
#previousButton {left: 10px}
#inputLabel {left: 0}
#inputContainer {padding-left: 0; margin-right:20px}
}
#prompt {
    height: 20vh;
    width: 40vw;
    background-color: black;
    opacity: 0.7;
    position: absolute;
    top: 15vh;
    border-radius: 13px;
    text-align: center;
    color: aliceblue;   
    display: none;
    justify-content:center;
    align-content:center;
    flex-direction:column;
    font-size: 1.2em;
}
        </style>
    </head>
    <body>
        <div id="progress"></div>
            <div class="center">
                <div id="prompt">
                </div>
              <div id="register"> 
                
                <i id="previousButton" class="ion-android-arrow-back">⇦</i> 
                <i id="forwardButton" class="ion-android-arrow-forward">⇨</i>
                
                <datalist id="slots">
                        <option value="Monday, Wednesday, Friday">
                        <option value="Tuesday, Thursday, Saturday">
                        <option value="Saturday and Sunday">
                    </datalist>

                <datalist id="grades">
                    <option value="Grades 1-4">
                    <option value="Grades 5-8">
                    <option value="Grades 9 or 10">
                </datalist>

                <datalist id="subjects">
                        <option value="English">
                        <option value="Hindi">
                        <option value="Math">
                        <option value="Science">
                        <option value="Social Science">
                </datalist>
                      
            </select>

                <div id="inputContainer">
                  <input id="inputField" required multiple/>
                  <label id="inputLabel"></label>
                  <div id="inputProgress"></div>
                </div>
            </div>
        </div>
        <script>
            var questions = [
    {question:"x1, x2?"},
    {question:"x, y?"},
    {question:"x, y?"},
    {question:"x, y?"}
    // {question:"Preferred days?"},
    // {question:"What's your email?", type: "text", pattern: /^[^\s@]+@[^\s@]+\.[^\s@]+$/},
    // {question:"Create your username", type: "text"},
    // {question:"Create your password", type: "password"},
    // {question:"Re-enter password", type: "password"}
    ]
    
    // var onComplete = function() {
    
    //     fetch('/volunteer_registration', {
    //         method: 'POST',
    //         headers: {
    //             'Content-Type': 'application/json'
    //         },
    //         credentials: 'include',
    //         body: JSON.stringify({
    //             name: questions[0].answer+' '+questions[1].answer,
    //             class: questions[2].answer,
    //             subject: questions[3].answer,
    //             days: questions[4].answer,
    //             email: questions[5].answer,
    //             username: questions[6].answer,
    //             password: questions[8].answer
    //         })
    //     })
    //     .then((response) => response.json())
    //     .then((res) => {
    //         if(!res.success){
    //             swal('Registration failed!', res.errorMsg, 'error');
    //             setTimeout(() => {
    //                 window.location.href = '/volunteer_registration';
    //             }, 4000);
    //         } else {
    //             var h1 = document.createElement('h1')
    //             h1.style.fontSize = "4em";
    //             h1.appendChild(document.createTextNode('Thank you ' + questions[0].answer + ' for joining us!'))
            
    //             setTimeout(function() {
    //             register.parentElement.appendChild(h1)
    //             setTimeout(function() { h1.style.opacity = 1 }, 50)
    //             }, 1000)
    //             setTimeout(() => window.location.href = '/volunteer', 4000);
    //         }
    //     })
    //     .catch((err) => console.log(err));
    // }

    var onComplete = function() {
        alert("Done");
    }
    
    ;(function(questions, onComplete) {
    
        var tTime = 100
        var wTime = 200
        var eTime = 1000 
    
        if (questions.length== 0) return
    
        var position = 0
    
        putQuestion()
    
        first_password = "hi"
        first_password_position = 7
        second_password_position = 8
    
        forwardButton.addEventListener('click', validate)
        inputField.addEventListener('keyup', function(e) {
            transform(0, 0)
            if (e.keyCode == 13) validate()
        })
    
        previousButton.addEventListener('click', function(e) {
            if (position === 0) return
            position -= 1
            hideCurrent(putQuestion)
        })

    
        function putQuestion() {
            prompt_div = document.getElementById("prompt");
            prompt_div.style.display = "none";
    
            inputField.removeAttribute("list");
    
            inputLabel.innerHTML = questions[position].question
            inputField.type = questions[position].type || 'text'

            if(position == 0) {
                prompt_div.style.display = "flex";
                prompt_div.innerHTML = "2x - y = -4 <br> 3x - y = -2";
    
            }
            else if(position==1) {
                prompt_div.style.display = "flex";
                prompt_div.innerHTML = "x^2 - 5x - 14 = 0";
            }
            else if(position==2) {
                prompt_div.style.display = "flex";
                prompt_div.innerHTML = "7x + 4y = -4  <br> x - 3y = 3";
            }
            else if(position==3) {
                prompt_div.style.display = "flex";
                prompt_div.innerHTML = "13x + 5y = 0 <br>  2x + y = 3";
            }
            inputField.value = questions[position].answer || ''
            inputField.focus()
    
            progress.style.width = position * 100 / questions.length + '%'
    
            previousButton.className = position ? 'ion-android-arrow-back' : 'ion-person'
    
            showCurrent()
    
        }

        
        function validate() {
    
            var validateCore = function() {
            //console.log("1");      
            if(position == first_password_position) {
                console.log("3 entered");
                first_password = inputField.value
            }
            if(position == second_password_position) {
                        console.log("4 entered");
                        console.log(inputField.value,first_password, first_password.length);
                        if(!(inputField.value == first_password)) {
                            console.log("2 check: ", inputField.value, first_password)
                            console.log("Checking");
                            //confirm("Passwords don't match!");
                            return null;
                        }
                    }
            return inputField.value.match(questions[position].pattern || /.+/)
            }
    
            if (!questions[position].validate) questions[position].validate = validateCore
    
            // check if the pattern matches
            if (!questions[position].validate()) wrong(inputField.focus.bind(inputField))
            else ok(function() {
    
                // execute the custom end function or the default value set
                if (questions[position].done) 
                    questions[position].done()
                else {
                    //console.log("Position:",position);
                    questions[position].answer = inputField.value
                    // if(position == 3) {
                    //     console.log("3 entered");
                    //     first_password = questions[position].answer
                    // }
                    // if(position == 4) {
                    //     console.log("4 entered");
                    //     console.log(questions[position].answer," ",first_password);
                    //     if(!(questions[position].answer == first_password)) {
                    //         console.log("Checking");
                    //         alert("Passwords don't match! Database Entry not created!");
                    //     }
                    // }
                }
                ++position
    
                // if there is a new question, hide current and load next
                if (questions[position]) hideCurrent(putQuestion)
                else hideCurrent(function() {
                    // remove the box if there is no next question
                    register.className = 'close'
                    progress.style.width = '100%'
    
                    onComplete()
                
                })
    
            })
    
        }
        
        function hideCurrent(callback) {
            inputContainer.style.opacity = 0
            inputLabel.style.marginLeft = 0
            inputProgress.style.width = 0
            inputProgress.style.transition = 'none'
            inputContainer.style.border = null
            setTimeout(callback, wTime)
        }
    
        function showCurrent(callback) {
            inputContainer.style.opacity = 1
            inputProgress.style.transition = ''
            inputProgress.style.width = '100%'
            setTimeout(callback, wTime)
        }
    
        function transform(x, y) {
            register.style.transform = 'translate(' + x + 'px ,  ' + y + 'px)'
        }
    
        function ok(callback) {
            register.className = ''
            setTimeout(transform, tTime * 0, 0, 10)
            setTimeout(transform, tTime * 1, 0, 0)
            setTimeout(callback, tTime * 2)
        }
    
        /* WRONG SHAKE */
        function wrong(callback) {
            if(position==second_password_position) {
                var warn = document.createElement('div')
                warn.innerHTML= "Passwords don't match!";
                var warn = document.createElement('div')
            warn.innerHTML= "Passwords don't match!";
            warn.style.height = "20vh";
            warn.style.width = "40vw";
            warn.style.backgroundColor= "black";
            warn.style.opacity= "1";
            warn.style.position= "absolute";
            warn.style.top= "70vh";
            warn.style.borderRadius= "13px";
            warn.style.textAlign= "center";
            warn.style.color= "red";   
            warn.style.display= "none";
            warn.style.justifyContent = "center";
            warn.style.alignContent="center";
            warn.style.flexDirection="column";
            warn.style.fontSize= "1.2em";

            center_div = document.getElementsByClassName('center')[0];
            center_div.appendChild(warn);
                setTimeout(function() { warn.style.opacity = 0 }, 2500);
            }
            register.className = 'wrong'
            for (var i = 0; i < 6; i++)
                setTimeout(transform, tTime * i, (i % 2 * 2 - 1) * 20, 0)
            setTimeout(transform, tTime * 6, 0, 0)
            setTimeout(callback, tTime * 7)
    
        }
    
    }(questions, onComplete))
        </script>
    </body>
</html>